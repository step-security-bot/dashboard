import{j as o}from"./jsx-runtime-QvtbNqby.js";import{r as I}from"./index-BjzEU6Zr.js";import{p as M,E as z}from"./path-C2yqBsjs.js";import{C as F,k as q,N as K,c as C,a as G,s as c}from"./constants-Ckav7-Zh.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./StatusIcon-CW7OjgEa.js";import"./bucket-12-CMgbqDR8.js";import"./Icon-CpyVU44g.js";import"./index-kGlasm3i.js";import"./bucket-10-CBZBeuBJ.js";import"./bucket-1-0rDURAtO.js";import"./bucket-17-BNnKjYXl.js";import"./bucket-16-CiwkPD5r.js";import"./bucket-6-CywArVTS.js";import"./bucket-18-ByJs4WER.js";import"./bucket-2-C9DXCKPV.js";function O({direction:s,edge:e}){const t=e.sections[0],r=M();return r.moveTo(t.startPoint.x,t.startPoint.y),t.bendPoints&&t.bendPoints.forEach(i=>{r.lineTo(i.x,i.y)}),r.lineTo(t.endPoint.x-(s==="RIGHT"?3:0),t.endPoint.y-(s==="RIGHT"?0:3)),o.jsx(F,{path:r.toString(),markerEnd:"arrowRight",variant:"dash-sm"})}O.__docgenInfo={description:"",methods:[],displayName:"Edge"};function Z({direction:s,edges:e}){return e.map(t=>o.jsx(O,{direction:s,edge:t},t.id))}function X(s){return s.map(e=>o.jsx(K,{id:e.id,x:e.x,y:e.y,height:e.height,width:e.width,status:e.status,title:e.title,type:e.type},e.id))}function V({direction:s="RIGHT",id:e,nodes:t,edges:r,type:i="detailed"}){const k=new z({defaultLayoutOptions:{"elk.algorithm":"layered","elk.direction":s,"elk.edgeRouting":"ORTHOGONAL","elk.layered.mergeEdges":!0,separateConnectedComponents:!1,"spacing.nodeNode":i==="detailed"?20:5,"spacing.nodeNodeBetweenLayers":i==="detailed"?50:20}}),[n,f]=I.useState(null),m={id:e,children:t,edges:r};if(I.useEffect(()=>{k.layout(m).then(H=>f(H)).catch(console.error)},[s]),!n)return null;const{children:h,edges:u,height:a,width:_}=n,d=Z({direction:s,edges:u}),p=X(h);return o.jsx("div",{className:"tkn--pipeline-graph",children:o.jsxs("svg",{style:{height:a,width:_},children:[o.jsx("defs",{children:o.jsx(q,{id:"arrowRight",height:8,width:7.5})}),d,p]})})}V.__docgenInfo={description:"",methods:[],displayName:"Graph",props:{direction:{defaultValue:{value:"'RIGHT'",computed:!1},required:!1},type:{defaultValue:{value:"'detailed'",computed:!1},required:!1}}};function g({edges:s,source:e,target:t}){s.push({id:`${e}::${t}`,source:e,target:t})}function l({pipeline:s,pipelineRun:e,trigger:t}){const r=[],i=[],k=[];let n=new Set(s.spec.tasks.map(({name:a})=>a));s.spec.tasks.forEach((a,_)=>{i.push({id:a.name,status:e?"success":"unknown",title:a.name,height:C,width:G});const d=new Set;a.runAfter?.forEach(p=>{d.add(p)}),d.size===0?k.push(a.name):Array.from(d).forEach(p=>{n.delete(p),g({edges:r,source:p,target:a.name})})}),n=Array.from(n).map(a=>({name:a}));const f="tkn-graph--trigger",m="tkn-graph--pipelineTasksEnd",h="tkn-graph--end";i.push({id:f,title:"Trigger info TBD",height:c,width:c,status:t?.type||"dummy",type:"icon"}),k.forEach(a=>{g({edges:r,source:f,target:a})});const u=s.spec.finally||[];return u.length&&(i.push({id:m,title:"?",height:c,width:c,status:"dummy",type:"icon"}),n.forEach(({name:a})=>{g({edges:r,source:a,target:m})}),u.forEach(({name:a})=>{i.push({id:a,status:e?"success":null,title:a,height:C,width:G}),g({edges:r,source:m,target:a})})),i.push({id:h,title:"Status TBD",height:c,width:c,status:e?"success":null,type:"icon"}),(u.length?u:n).forEach(({name:a})=>{g({edges:r,source:a,target:h})}),{nodes:i,edges:r}}function Y({height:s,type:e,width:t}){return[{id:"skaffold-unit-tests",status:"success-warning",title:"skaffold-unit-tests",height:s,width:t,type:e},{id:"build-skaffold-web",status:"success",title:"build-skaffold-web",height:s,width:t,type:e},{id:"build-skaffold-app",status:"success",title:"build-skaffold-app",height:s,width:t,type:e},{id:"deploy-app",status:"success",title:"deploy-app",height:s,width:t,type:e},{id:"deploy-web",status:"failed",title:"deploy-web",height:s,width:t,type:e}]}function J(){return[{id:"1",source:"skaffold-unit-tests",target:"build-skaffold-app"},{id:"2",source:"skaffold-unit-tests",target:"build-skaffold-web"},{id:"3",source:"build-skaffold-app",target:"deploy-app"},{id:"4",source:"build-skaffold-web",target:"deploy-web"}]}function U({height:s,type:e="card",width:t}){return{edges:J(),nodes:Y({height:s,type:e,width:t})}}function Q({height:s,type:e,width:t}){return[{id:"git-clone",status:"success",title:"git-clone",height:s,width:t,type:e},{id:"precheck",status:"success",title:"precheck",height:s,width:t,type:e},{id:"build",status:"success",title:"build",height:s,width:t,type:e},{id:"publish-images",status:"success",title:"publish-images",height:s,width:t,type:e},{id:"publish-to-bucket",status:"success",title:"publish-to-bucket",height:s,width:t,type:e},{id:"publish-to-bucket-latest",status:"success",title:"publish-to-bucket-latest",height:s,width:t,type:e},{id:"report-bucket",status:"success",title:"report-bucket",height:s,width:t,type:e}]}function ee(){return[{id:"1",source:"git-clone",target:"precheck"},{id:"2",source:"precheck",target:"build"},{id:"3",source:"build",target:"publish-images"},{id:"4",source:"publish-images",target:"publish-to-bucket"},{id:"5",source:"publish-images",target:"publish-to-bucket-latest"},{id:"6",source:"publish-to-bucket",target:"report-bucket"}]}function W({height:s,type:e="card",width:t}){return{edges:ee(),nodes:Q({height:s,type:e,width:t})}}function se({height:s,type:e,width:t}){return[{id:"git-clone",status:"success",title:"git-clone",height:s,width:t,type:e},{id:"npm-install",status:"success",title:"npm-install",height:s,width:t,type:e},{id:"lint",status:"success",title:"lint",height:s,width:t,type:e},{id:"unit-tests",status:"success",title:"unit-tests",height:s,width:t,type:e},{id:"static-scan",status:"success",title:"static-scan",height:s,width:t,type:e},{id:"build",status:"success",title:"build",height:s,width:t,type:e},{id:"integration-tests",status:"success",title:"integration-tests",height:s,width:t,type:e},{id:"publish-images",status:"success",title:"publish-images",height:s,width:t,type:e},{id:"publish-to-bucket",status:"success",title:"publish-to-bucket",height:s,width:t,type:e},{id:"publish-to-bucket-latest",status:"success",title:"publish-to-bucket-latest",height:s,width:t,type:e},{id:"report-bucket",status:"success",title:"report-bucket",height:s,width:t,type:e}]}function te(){return[{id:"1",source:"git-clone",target:"npm-install"},{id:"2",source:"npm-install",target:"lint"},{id:"3",source:"npm-install",target:"unit-tests"},{id:"4",source:"npm-install",target:"static-scan"},{id:"5",source:"lint",target:"build"},{id:"6",source:"unit-tests",target:"build"},{id:"7",source:"static-scan",target:"build"},{id:"8",source:"build",target:"integration-tests"},{id:"9",source:"integration-tests",target:"publish-images"},{id:"10",source:"publish-images",target:"publish-to-bucket"},{id:"11",source:"publish-images",target:"publish-to-bucket-latest"},{id:"12",source:"publish-to-bucket",target:"report-bucket"}]}function j({height:s,type:e="card",width:t}){return{edges:te(),nodes:se({height:s,type:e,width:t})}}function ae({height:s,width:e}){return[{id:"1",title:"1",status:"success",height:s,width:e},{id:"2",title:"2",status:"success",height:s,width:e},{id:"3",title:"3",status:"success",height:s,width:e},{id:"4",title:"4",status:"success",height:s,width:e},{id:"5",title:"5",status:"success",height:s,width:e},{id:"6",title:"6",status:"success",height:s,width:e},{id:"7",title:"7",status:"success",height:s,width:e},{id:"8",title:"8",status:"success",height:s,width:e},{id:"9",title:"9",status:"success",height:s,width:e},{id:"10",title:"10",status:"success",height:s,width:e},{id:"11",title:"11",status:"success",height:s,width:e},{id:"12",title:"12",status:"success",height:s,width:e},{id:"13",title:"13",status:"success",height:s,width:e},{id:"14",title:"14",status:"success",height:s,width:e},{id:"15",title:"15",status:"success",height:s,width:e},{id:"16",title:"16",status:"success",height:s,width:e},{id:"17",title:"17",status:"success",height:s,width:e},{id:"18",title:"18",status:"success",height:s,width:e},{id:"19",title:"19",status:"success",height:s,width:e},{id:"20",title:"20",status:"success",height:s,width:e},{id:"21",title:"21",status:"success",height:s,width:e},{id:"22",title:"22",status:"success",height:s,width:e},{id:"23",title:"23",status:"success",height:s,width:e},{id:"24",title:"24",status:"success",height:s,width:e},{id:"25",title:"25",status:"success",height:s,width:e},{id:"26",title:"26",status:"success",height:s,width:e},{id:"27",title:"27",status:"success",height:s,width:e},{id:"28",title:"28",status:"success",height:s,width:e},{id:"29",title:"29",status:"success",height:s,width:e},{id:"30",title:"30",status:"success",height:s,width:e}]}function re(){return[{id:"1-2",source:"1",target:"2"},{id:"1-3",source:"1",target:"3"},{id:"1-4",source:"1",target:"4"},{id:"1-5",source:"1",target:"5"},{id:"1-6",source:"1",target:"6"},{id:"1-7",source:"1",target:"7"},{id:"2-8",source:"2",target:"8"},{id:"2-9",source:"2",target:"9"},{id:"2-10",source:"2",target:"10"},{id:"2-11",source:"2",target:"11"},{id:"2-12",source:"2",target:"12"},{id:"2-13",source:"2",target:"13"},{id:"3-14",source:"3",target:"14"},{id:"3-15",source:"3",target:"15"},{id:"3-16",source:"3",target:"16"},{id:"3-17",source:"3",target:"17"},{id:"3-18",source:"3",target:"18"},{id:"3-19",source:"3",target:"19"},{id:"3-20",source:"3",target:"20"},{id:"10-21",source:"10",target:"21"},{id:"10-22",source:"10",target:"22"},{id:"10-23",source:"10",target:"23"},{id:"10-24",source:"10",target:"24"},{id:"10-25",source:"10",target:"25"},{id:"17-26",source:"17",target:"26"},{id:"17-27",source:"17",target:"27"},{id:"17-28",source:"17",target:"28"},{id:"17-29",source:"17",target:"29"},{id:"17-30",source:"17",target:"30"}]}function ie({height:s,width:e}){return{edges:re(),nodes:ae({height:s,width:e})}}const ne="tekton.dev/v1beta1",ce="Pipeline",oe={name:"dag-example-from-docs"},ue={tasks:[{name:"lint-repo",taskRef:{name:"pylint"}},{name:"test-app",taskRef:{name:"make-test"}},{name:"build-app",taskRef:{name:"kaniko-build-app"},runAfter:["test-app"]},{name:"build-frontend",taskRef:{name:"kaniko-build-frontend"},runAfter:["test-app"]},{name:"deploy-all",taskRef:{name:"deploy-kubectl"},runAfter:["build-app","build-frontend"]}]},L={apiVersion:ne,kind:ce,metadata:oe,spec:ue},pe="tekton.dev/v1beta1",le="Pipeline",me={annotations:{"managed-by":"Tekton"},creationTimestamp:"2021-02-09T13:44:00Z",generation:1510,name:"pipeline-pipeline-release",namespace:"tekton-nightly",resourceVersion:"1323145068",uid:"e61738cc-a3c6-4eec-9b8c-938e6514e479"},de={params:[{default:"github.com/tektoncd/pipeline",description:"package to release",name:"package",type:"string"},{description:"the git revision to release",name:"gitRevision",type:"string"},{default:"gcr.io",description:"The target image registry",name:"imageRegistry",type:"string"},{default:"tekton-releases",description:"The path (project) in the image registry",name:"imageRegistryPath",type:"string"},{description:"The X.Y.Z version that the artifacts should be tagged with",name:"versionTag",type:"string"},{default:"gs://tekton-releases-nightly/pipeline",description:"bucket where the release is stored. The bucket must be project specific.",name:"releaseBucket",type:"string"},{default:"true",description:"Whether to tag and publish this release as Pipelines' latest",name:"releaseAsLatest",type:"string"},{default:"linux/amd64,linux/arm,linux/arm64,linux/s390x,linux/ppc64le",description:"Platforms to build images for (e.g. linux/amd64,linux/arm64)",name:"buildPlatforms",type:"string"},{default:"linux/amd64,linux/arm,linux/arm64,linux/s390x,linux/ppc64le,windows/amd64",description:`Platforms to publish images for (e.g. linux/amd64,linux/arm64,windows/amd64). This
can differ from buildPlatforms due to the fact that a windows-compatible base image
is constructed for the publishing phase.
`,name:"publishPlatforms",type:"string"},{description:"The path to the service account file within the release-secret workspace",name:"serviceAccountPath",type:"string"}],results:[{description:"the sha of the commit that was released",name:"commit-sha",value:"$(tasks.git-clone.results.commit)"},{description:"the URL of the release file",name:"release-file",value:"$(tasks.report-bucket.results.release)"},{description:"the URL of the release file",name:"release-file-no-tag",value:"$(tasks.report-bucket.results.release-no-tag)"}],tasks:[{name:"git-clone",params:[{name:"url",value:"https://$(params.package)"},{name:"revision",value:"$(params.gitRevision)"}],taskRef:{kind:"Task",name:"git-clone"},workspaces:[{name:"output",subPath:"git",workspace:"workarea"}]},{name:"precheck",params:[{name:"package",value:"$(params.package)"},{name:"versionTag",value:"$(params.versionTag)"},{name:"releaseBucket",value:"$(params.releaseBucket)"}],runAfter:["git-clone"],taskRef:{kind:"Task",name:"prerelease-checks"},workspaces:[{name:"source-to-release",subPath:"git",workspace:"workarea"}]},{name:"unit-tests",params:[{name:"package",value:"$(params.package)"},{name:"flags",value:"-v -mod=vendor"}],runAfter:["precheck"],taskRef:{kind:"Task",name:"golang-test"},workspaces:[{name:"source",subPath:"git",workspace:"workarea"}]},{name:"build",params:[{name:"package",value:"$(params.package)"},{name:"packages",value:"./cmd/..."}],runAfter:["precheck"],taskRef:{kind:"Task",name:"golang-build"},workspaces:[{name:"source",subPath:"git",workspace:"workarea"}]},{name:"build-base-image",params:[{name:"package",value:"$(params.package)"},{name:"imageRegistry",value:"$(params.imageRegistry)"},{name:"imageRegistryPath",value:"$(params.imageRegistryPath)"},{name:"platforms",value:"$(params.buildPlatforms)"},{name:"serviceAccountPath",value:"$(params.serviceAccountPath)"}],runAfter:["build","unit-tests"],taskRef:{kind:"Task",name:"pipeline-build-multiarch-base-image"},workspaces:[{name:"source",subPath:"git",workspace:"workarea"},{name:"release-secret",workspace:"release-secret"}]},{name:"publish-images",params:[{name:"package",value:"$(params.package)"},{name:"versionTag",value:"$(params.versionTag)"},{name:"imageRegistry",value:"$(params.imageRegistry)"},{name:"imageRegistryPath",value:"$(params.imageRegistryPath)"},{name:"releaseAsLatest",value:"$(params.releaseAsLatest)"},{name:"serviceAccountPath",value:"$(params.serviceAccountPath)"},{name:"platforms",value:"$(params.publishPlatforms)"}],runAfter:["build-base-image"],taskRef:{kind:"Task",name:"pipeline-publish-release"},workspaces:[{name:"source",subPath:"git",workspace:"workarea"},{name:"output",subPath:"bucket",workspace:"workarea"},{name:"release-secret",workspace:"release-secret"}]},{name:"publish-to-bucket",params:[{name:"location",value:"$(params.releaseBucket)/previous/$(params.versionTag)"},{name:"path",value:"$(params.versionTag)"},{name:"serviceAccountPath",value:"$(params.serviceAccountPath)"}],runAfter:["publish-images"],taskRef:{kind:"Task",name:"gcs-upload"},workspaces:[{name:"credentials",workspace:"release-secret"},{name:"source",subPath:"bucket",workspace:"workarea"}]},{name:"publish-to-bucket-latest",params:[{name:"location",value:"$(params.releaseBucket)/latest"},{name:"path",value:"$(params.versionTag)"},{name:"serviceAccountPath",value:"$(params.serviceAccountPath)"}],runAfter:["publish-images"],taskRef:{kind:"Task",name:"gcs-upload"},when:[{input:"$(params.releaseAsLatest)",operator:"in",values:["true"]}],workspaces:[{name:"credentials",workspace:"release-secret"},{name:"source",subPath:"bucket",workspace:"workarea"}]},{name:"report-bucket",params:[{name:"releaseBucket",value:"$(params.releaseBucket)"},{name:"versionTag",value:"$(params.versionTag)"}],runAfter:["publish-to-bucket"],taskSpec:{metadata:{},params:[{name:"releaseBucket",type:"string"},{name:"versionTag",type:"string"}],results:[{description:"The full URL of the release file in the bucket",name:"release"},{description:"The full URL of the release file (no tag) in the bucket",name:"release-no-tag"}],spec:null,steps:[{env:[{name:"RELEASE_BUCKET",value:"$(params.releaseBucket)"},{name:"VERSION_TAG",value:"$(params.versionTag)"}],image:"alpine",name:"create-results",resources:{},script:`BASE_URL=$(echo "\${RELEASE_BUCKET}/previous/\${VERSION_TAG}")
# If the bucket is in the gs:// return the corresponding public https URL
BASE_URL=$(echo \${BASE_URL} | sed 's,gs://,https://storage.googleapis.com/,g')
echo "\${BASE_URL}/release.yaml" > $(results.release.path)
echo "\${BASE_URL}/release.notag.yaml" > $(results.release-no-tag.path)
`}]}}],workspaces:[{description:"The workspace where the repo will be cloned.",name:"workarea"},{description:"The secret that contains a service account authorized to push to the imageRegistry and to the output bucket",name:"release-secret"}]},ge={apiVersion:pe,kind:le,metadata:me,spec:de},ke="tekton.dev/v1beta1",fe="Pipeline",he={name:"clone-cleanup-workspace"},be={workspaces:[{name:"git-source"}],tasks:[{name:"clone-app-repo",taskRef:{name:"git-clone-from-catalog"},params:[{name:"url",value:"https://github.com/tektoncd/community.git"},{name:"subdirectory",value:"application"}],workspaces:[{name:"output",workspace:"git-source"}]}],finally:[{name:"cleanup",taskRef:{name:"cleanup-workspace"},workspaces:[{name:"source",workspace:"git-source"}]},{name:"check-git-commit",params:[{name:"commit",value:"$(tasks.clone-app-repo.results.commit)"}],taskSpec:{params:[{name:"commit"}],steps:[{name:"check-commit-initialized",image:"alpine",script:`if [[ ! $(params.commit) ]]; then
  exit 1
fi
`}]}}]},ve={apiVersion:ke,kind:fe,metadata:he,spec:be},$e="tekton.dev/v1beta1",ye="PipelineRun",xe={generateName:"guarded-pr-"},Re={serviceAccountName:"default",pipelineSpec:{params:[{name:"path",type:"string",description:"The path of the file to be created"},{name:"branches",type:"array",description:"The list of branch names"}],workspaces:[{name:"source",description:`This workspace is shared among all the pipeline tasks to read/write common resources
`}],tasks:[{name:"create-file",when:[{input:"$(params.path)",operator:"in",values:["README.md"]}],workspaces:[{name:"source",workspace:"source"}],taskSpec:{workspaces:[{name:"source",description:"The workspace to create the readme file in"}],steps:[{name:"write-new-stuff",image:"ubuntu",script:"touch $(workspaces.source.path)/README.md"}]}},{name:"check-file",params:[{name:"path",value:"$(params.path)"}],workspaces:[{name:"source",workspace:"source"}],runAfter:["create-file"],taskSpec:{params:[{name:"path"}],workspaces:[{name:"source",description:"The workspace to check for the file"}],results:[{name:"exists",description:"indicates whether the file exists or is missing"}],steps:[{name:"check-file",image:"alpine",script:`if test -f $(workspaces.source.path)/$(params.path); then
  printf yes | tee /tekton/results/exists
else
  printf no | tee /tekton/results/exists
fi
`}]}},{name:"echo-file-exists",when:[{input:"$(tasks.check-file.results.exists)",operator:"in",values:["yes"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"echo file exists"}]}},{name:"sample-task-with-array-values",when:[{input:"main",operator:"in",values:["$(params.branches[*])"]}],taskSpec:{steps:[{name:"echo",image:"alpine",script:"echo hello"}]}},{name:"task-should-be-skipped-1",when:[{input:"$(tasks.check-file.results.exists)",operator:"in",values:["missing"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"task-should-be-skipped-2",when:[{input:"$(params.path)",operator:"notin",values:["README.md"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"task-should-be-skipped-3",runAfter:["echo-file-exists"],when:[{input:"monday",operator:"in",values:["friday"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"task-should-be-skipped-4",when:[{input:"master",operator:"in",values:["$(params.branches[*])"]}],taskSpec:{steps:[{name:"echo",image:"alpine",script:"exit 1"}]}}],finally:[{name:"finally-task-should-be-skipped-1",when:[{input:"$(tasks.echo-file-exists.status)",operator:"in",values:["Failure"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"finally-task-should-be-skipped-2",when:[{input:"$(tasks.check-file.results.exists)",operator:"in",values:["missing"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"finally-task-should-be-skipped-3",when:[{input:"$(params.path)",operator:"notin",values:["README.md"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"finally-task-should-be-skipped-4",when:[{input:"$(tasks.status)",operator:"in",values:["Failure"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"finally-task-should-be-skipped-5",when:[{input:"$(tasks.status)",operator:"in",values:["Succeeded"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"exit 1"}]}},{name:"finally-task-should-be-executed",when:[{input:"$(tasks.echo-file-exists.status)",operator:"in",values:["Succeeded"]},{input:"$(tasks.status)",operator:"in",values:["Completed"]},{input:"$(tasks.check-file.results.exists)",operator:"in",values:["yes"]},{input:"$(params.path)",operator:"in",values:["README.md"]}],taskSpec:{steps:[{name:"echo",image:"ubuntu",script:"echo finally done"}]}}]},params:[{name:"path",value:"README.md"},{name:"branches",value:["main","hotfix"]}],workspaces:[{name:"source",volumeClaimTemplate:{spec:{accessModes:["ReadWriteOnce"],resources:{requests:{storage:"16Mi"}}}}}]},we={apiVersion:$e,kind:ye,metadata:xe,spec:Re},We={component:V,args:{direction:"RIGHT",id:"id"},argTypes:{direction:{control:{type:"inline-radio"},options:["DOWN","RIGHT"]}},title:"Graph"},N={height:C,type:"card",width:G},B={height:c,type:"icon",width:c},b={args:{...U(N)}},v={args:{...W(N)}},$={args:{...j(N)}},y={args:{...U(B),type:"condensed"}},x={args:{...W(B),type:"condensed"}},R={args:{...j(B),type:"condensed"}},w={args:{...l({pipeline:L,pipelineRun:!0,trigger:{type:"manual"}})}},A={args:{...l({pipeline:ge,pipelineRun:!0,trigger:{type:"timer"}})}},E={args:{...l({pipeline:ve,pipelineRun:!0,trigger:{type:"git"}})}},T={args:{...l({pipeline:{spec:we.spec.pipelineSpec},pipelineRun:!0,trigger:{type:"webhook"}})}},D={args:{...l({pipeline:L,pipelineRun:!0,trigger:{type:"trigger"}})}},P={args:{...l({pipeline:L,pipelineRun:!0})}},S={args:{direction:"DOWN",...ie({...N,width:G/2})}};b.parameters={...b.parameters,docs:{...b.parameters?.docs,source:{originalSource:`{
  args: {
    ...example1(cardConfig)
  }
}`,...b.parameters?.docs?.source}}};v.parameters={...v.parameters,docs:{...v.parameters?.docs,source:{originalSource:`{
  args: {
    ...example2(cardConfig)
  }
}`,...v.parameters?.docs?.source}}};$.parameters={...$.parameters,docs:{...$.parameters?.docs,source:{originalSource:`{
  args: {
    ...example3(cardConfig)
  }
}`,...$.parameters?.docs?.source}}};y.parameters={...y.parameters,docs:{...y.parameters?.docs,source:{originalSource:`{
  args: {
    ...example1(iconConfig),
    type: 'condensed'
  }
}`,...y.parameters?.docs?.source}}};x.parameters={...x.parameters,docs:{...x.parameters?.docs,source:{originalSource:`{
  args: {
    ...example2(iconConfig),
    type: 'condensed'
  }
}`,...x.parameters?.docs?.source}}};R.parameters={...R.parameters,docs:{...R.parameters?.docs,source:{originalSource:`{
  args: {
    ...example3(iconConfig),
    type: 'condensed'
  }
}`,...R.parameters?.docs?.source}}};w.parameters={...w.parameters,docs:{...w.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: example7Pipeline,
      pipelineRun: true,
      trigger: {
        type: 'manual'
      }
    })
  }
}`,...w.parameters?.docs?.source}}};A.parameters={...A.parameters,docs:{...A.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: releasePipeline,
      pipelineRun: true,
      trigger: {
        type: 'timer'
      }
    })
  }
}`,...A.parameters?.docs?.source}}};E.parameters={...E.parameters,docs:{...E.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: finallyPipeline,
      pipelineRun: true,
      trigger: {
        type: 'git'
      }
    })
  }
}`,...E.parameters?.docs?.source}}};T.parameters={...T.parameters,docs:{...T.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: {
        spec: whenExpressionsPipelineRun.spec.pipelineSpec
      },
      pipelineRun: true,
      trigger: {
        type: 'webhook'
      }
    })
  }
}`,...T.parameters?.docs?.source}}};D.parameters={...D.parameters,docs:{...D.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: example7Pipeline,
      pipelineRun: true,
      trigger: {
        type: 'trigger'
      }
    })
  }
}`,...D.parameters?.docs?.source}}};P.parameters={...P.parameters,docs:{...P.parameters?.docs,source:{originalSource:`{
  args: {
    ...getDAG({
      pipeline: example7Pipeline,
      pipelineRun: true
    })
  }
}`,...P.parameters?.docs?.source}}};S.parameters={...S.parameters,docs:{...S.parameters?.docs,source:{originalSource:`{
  args: {
    direction: 'DOWN',
    ...example8({
      ...cardConfig,
      width: cardWidth / 2
    })
  }
}`,...S.parameters?.docs?.source}}};const je=["Detailed1","Detailed2","Detailed3","Condensed1","Condensed2","Condensed3","DAG1","DAG2Wide","DAG3Finally","DAG4WhenExpressions","DAG5Trigger","DAG6NoTrigger","Order"];export{y as Condensed1,x as Condensed2,R as Condensed3,w as DAG1,A as DAG2Wide,E as DAG3Finally,T as DAG4WhenExpressions,D as DAG5Trigger,P as DAG6NoTrigger,b as Detailed1,v as Detailed2,$ as Detailed3,S as Order,je as __namedExportsOrder,We as default};
